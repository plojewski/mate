// ============================================================
// MATE TOOLBOX
// ============================================================

// ============================================================
// EXTENDS, PLACEHOLDERS
// ============================================================
%box-sizing--border {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

%box-sizing--content {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
}

%clearfix {
  &:before,
  &:after {
    content: '';
    display: block;
    clear: both;
  }
}

%ellipsis {
  text-overflow: ellipsis;
  vertical-align: top;
  white-space: nowrap;
  overflow: hidden;
  display: inline-block;
}

%hide-text {
  overflow: hidden;
  text-indent: -9999px;
  display: block;
}

%word-wrap {
  word-wrap: break-word; // Old method, http://caniuse.com/#feat=wordwrap
  overflow-wrap: break-word;
}

%noselect {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

%disabled {
  cursor: no-drop;
}

// ============================================================
// FUNCTIONS
// ============================================================
@function calculateRem($size) {
  @return ($size / 1px / 10) * 1rem;
}

@function strip-units($value) {
  @return $value / ($value * 0 + 1);
}

// ============================================================
// MIXINS
// ============================================================

// ============================================================
// MEDIA QUERIES BREAKPOINT
// [i] breakpoints inpired by
// http://blog.uxpin.com/4596/responsive-web-design-cheat-sheet/
// and Chrome Dev Tools devices
//
// Examples:
//
// @include respond-to($desktop--xl) {
//    font-size: 3rem;
// }
//
// @include respond-to-free(min-width, 720px, max-width, 960px) {
//    width: 95vw;
// }
//
// ============================================================
$mobile:      'screen and (max-width: #{$breakPoint__desktop - 1})';
$phone:       'screen and (max-width: #{$breakPoint__phone - 1})';
$tablet:      'screen and (min-width: #{$breakPoint__phone}) and (max-width: #{$breakPoint__desktop - 1})';
$tablet--xs:  'screen and (min-width: #{$breakPoint__phone}) and (max-width: #{$breakPoint__tablet--xs})';
$desktop:     'screen and (min-width: #{$breakPoint__desktop})';
$desktop--xl: 'screen and (min-width: #{$breakPoint__desktop--xl + 1})';
$print:       'print';

@mixin respond-to($media) {
  @media #{$media} {
    @content;
  }
}

@mixin respond-to-free($target-1, $media-1, $target-2: null, $media-2: null) {
  @if $target-2 {
    @media screen and ($target-1: $media-1) and ($target-2: $media-2) {
      @content;
    }
  } @else {
    @media screen and ($target-1: $media-1) {
      @content;
    }
  }
}

// FONT FACE
// ============================================================
@mixin font-face($dir, $file) {
  @each $file-name, $font-family in $file {
    @font-face {
      font-family: quote($font-family);
      font-style: normal;
      font-weight: normal;
      src: url($dir + $file-name + ".woff2") format('woff2'),
      url($dir + $file-name + ".woff") format('woff');
    }
  }
}

// ============================================================
// GRADIENTS
//
// Examples:
// @include gradient(rgba(6,30,66,1), rgba(6, 30, 66, 0), to right, 0, 50%);
// ============================================================
@mixin gradient($gradient-color-from, $gradient-color-to, $direction: to bottom, $gradient-from-loc: null, $gradient-to-loc: null, $type: linear) {
  background-image: linear-gradient($direction, $gradient-color-from $gradient-from-loc, $gradient-color-to $gradient-to-loc);
}

// ============================================================
// TRANSFORMS
// ============================================================

// Examples:
// @include transform-free(rotate(180deg) scale(1.4));
// @include transform-free(scale(1.4));
@mixin transform-free($args...) {
  -webkit-transform: $args;
  transform: $args;
}

@mixin rotate($val) {
  -webkit-transform: rotate($val+deg);
  transform: rotate($val+deg);
}

// ============================================================
// TRANSITIONS
// ============================================================

// Examples:
// @include transition-free(background-color .4s ease, width 1s ease-out);
// @include transition-free(0.5s ease);
@mixin transition-free($args...) {
  transition: $args;
}

// Examples:
// @include transition( (height, padding, top));
// @include transition( (height, padding, top), .25s, ease, .5s );
// @include transition;
@mixin transition($list: all, $duration: $trans__base--duration, $timing: $trans__base--timing, $delay: $trans__base--delay) {
  $properties: ();

  @each $property in $list {
    $transition: $property $duration $timing $delay;
    $properties: append($properties, $transition, comma);
  }

  @include transition-free(#{$properties});
}

// ============================================================
// ANIMATIONS
// ============================================================

// Examples:
// @include animation(animName 1s ease);
@mixin animation($args...) {
  animation: $args;
  -webkit-animation: $args;
}

// ============================================================
// FLEX BOX
// resources:
// https://scotch.io/demos/visual-guide-to-css3-flexbox-flexbox-playground
// https://css-tricks.com/snippets/css/a-guide-to-flexbox/
// todo: make mixin with params
// ============================================================

// Examples:
// <div class="box--flex">...</div>

@mixin flex-wrap {
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;

  // flex-direction
  -ms-flex-direction: row;
  -webkit-flex-direction: row;
  flex-direction: row;

  // flex-wrap
  -ms-flex-wrap: wrap;
  -webkit-flex-wrap: wrap;
  flex-wrap: wrap;

  // justify-content
  -ms-justify-content: flex-start;
  -webkit-justify-content: flex-start;
  justify-content: flex-start;

  // align-items
  -ms-align-items: stretch;
  -webkit-align-items: stretch;
  align-items: stretch;

  // align-content
  -ms-align-content: flex-start;
  -webkit-align-content: flex-start;
  align-content: flex-start;
}

@mixin flex-item {
  -ms-order: 0;
  -webkit-order: 0;
  order: 0;

  -ms-flex-grow: 0;
  -webkit-flex-grow: 0;
  flex-grow: 0;

  -ms-flex-shrink: 1;
  -webkit-flex-shrink: 1;
  flex-shrink: 1;

  -ms-flex-basis: auto;
  -webkit-flex-basis: auto;
  flex-basis: auto;

  -ms-align-self: auto;
  -webkit-align-self: auto;
  align-self: auto;
}

// ============================================================
// NATIVE CSS MULTI COLUMNS
// resources: http://caniuse.com/#search=column
// Inpiration: http://people.opera.com/pepelsbey/experiments/multicol/
// ============================================================

// Examples:
// <div class="column-2 column-1--phone column--bordered">...</div>

%masonry-common {
  -webkit-column-gap: $grid__col--gutter*2;
  -moz-column-gap: $grid__col--gutter*2;
  column-gap: $grid__col--gutter*2;
}

@mixin masonry-count {
  @for $i from 1 through $grid__columns {
    &-#{$i} {
      -webkit-column-count: $i;
      -moz-column-count: $i;
      column-count: $i;
    }
  }
}

// RWD COLUMNS FOR PHONE
@mixin masonry-phone {
  @include respond-to($phone) {
    @for $i from 1 through $grid__columns {
      &-#{$i}--phone {
        -webkit-column-count: $i;
        -moz-column-count: $i;
        column-count: $i;
      }
    }
  }
}

// RWD COLUMNS FOR TABLET
@mixin masonry-tablet {
  @include respond-to($tablet) {
    @for $i from 1 through $grid__columns {
      &-#{$i}--tablet {
        -webkit-column-count: $i;
        -moz-column-count: $i;
        column-count: $i;
      }
    }
  }
}

[class*="masonry-"] {
  @extend %masonry-common;

  > article {
    display: inline-block;
    float: none;
    padding: 0;
    width: 100%;

    &.masonry-span {
      -webkit-column-span: all;
      column-span: all;
      display: block;
    }
  }
}

.masonry {
  @include masonry-count;
  @include masonry-phone;
  @include masonry-tablet;

  &--bordered {
    -webkit-column-rule: 1px solid;
    -moz-column-rule: 1px solid;
    column-rule: 1px solid;

    @if variable-exists(border__color--first) {
      -webkit-column-rule-color: $border__color--first;
      -moz-column-rule-color: $border__color--first;
      column-rule-color: $border__color--first;
    }
  }
}

// ============================================================
// POSITIONING
// ============================================================

// Examples:
// @include centerer();
// @include centerer(x);
// @include centerer(y);
@mixin centerer($axis: auto) {

  @if $axis == x {
    @include transform-free(translateX(-50%));
    left: 50%;

  } @else if $axis == y {
    @include transform-free(translateY(-50%));
    top: 50%;

  } @else {
    @include transform-free(translate(-50%, -50%));
    top: 50%;
    left: 50%;
  }

  position: absolute;
}

@mixin coverer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// ============================================================
// FILTERS
// [i] Filters preview: http://html5-demos.appspot.com/static/css/filters/index.html
// ============================================================
@mixin filter($args...) {
  -webkit-filter: $args;
  filter: $args;
}

// ============================================================
// PERSPECTIVE
// ============================================================
@mixin perspective($size) {
  -webkit-perspective: $size;
  perspective: $size;
}

// ============================================================
// Animations
// [i] Useful for focusing user eyes on changed element
// ============================================================

// Example:
// add class .mate-blink to an element by JS
// document.getElementById(yourElement).classList.add('mate-blink');

.mate-blink {
  @include animation(mate-blink 2s ease);
}

@keyframes mate-blink {
  0% {
    @if variable-exists(color__message--warning) {
      background-color: $color__message--warning;
    }
  }

  100% {
    background-color: transparent;
  }
}


// INPUT PLACEHOLDER
@mixin placeholder($color: $text__color--muted, $font-size: inherit, $font-family: $font__base--regular) {
  ::-webkit-input-placeholder {
    color: $color;
    font-size: $font-size;
    font-family: $font-family;
  }

  ::-moz-placeholder {
    color: $color;
    font-size: $font-size;
    font-family: $font-family;
  }

  :-ms-input-placeholder {
    color: $color;
    font-size: $font-size;
    font-family: $font-family;
  }

  // CSS4
  ::placeholder {
    color: $color;
    font-size: $font-size;
    font-family: $font-family;
  }
}

// Use SVG icon for drop-down arrow
// Inpiration: https://css-tricks.com/probably-dont-base64-svg/
// Encode tool: http://pressbin.com/tools/urlencode_urldecode/ (use encodeURIComponent())
@mixin svg-bkg($color) {
  background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20x%3D%220px%22%20y%3D%220px%22%20fill%3D%22%23#{$color}%22%20%0A%09%20width%3D%2224px%22%20height%3D%2224px%22%20viewBox%3D%22-261%20145.2%2024%2024%22%20style%3D%22enable-background%3Anew%20-261%20145.2%2024%2024%3B%22%20xml%3Aspace%3D%22preserve%22%3E%0A%3Cpath%20d%3D%22M-245.3%2C156.1l-3.6-6.5l-3.7%2C6.5%20M-252.7%2C159l3.7%2C6.5l3.6-6.5%22%2F%3E%0A%3C%2Fsvg%3E');
}

// MISC
// todo: add to manual
// ------------------------------------------------------------
hr {
  border: 0;
  height: 1px;
  background-color: $border__color--first;
  margin: $grid__row--gutter auto;

  &.hr--mini {
    width: 150px;
  }

  &.hr--half {
    width: 50%;
  }
}